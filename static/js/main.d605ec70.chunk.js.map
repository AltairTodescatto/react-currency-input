{"version":3,"sources":["logo.svg","components/CurrencyInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","VALID_FIRST","VALID_NEXT","CurrencyInput","className","max","Number","MAX_SAFE_INTEGER","onValueChange","style","value","valueAbsTrunc","Math","trunc","abs","isFinite","isNaN","Error","handleKeyDown","useCallback","e","key","keyCode","test","nextValue","valueString","toString","nextValueString","parseInt","slice","handleChange","valueDisplay","toLocaleString","currency","inputMode","onChange","onKeyDown","App","useState","setValue","handleValueChange","val","console","log","src","logo","alt","href","target","rel","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,iLCUrCC,G,MAAc,cACdC,EAAa,aA2DJC,EAxDkB,SAAC,GAM3B,IAAD,IALJC,iBAKI,MALQ,GAKR,MAJJC,WAII,MAJEC,OAAOC,iBAIT,EAHJC,EAGI,EAHJA,cAGI,IAFJC,aAEI,MAFI,GAEJ,EADJC,EACI,EADJA,MAEMC,EAAgBC,KAAKC,MAAMD,KAAKE,IAAIJ,IAC1C,GAAIA,IAAUC,IAAkBL,OAAOS,SAASL,IAAUJ,OAAOU,MAAMN,GACrE,MAAM,IAAIO,MAAJ,0BAER,IAAMC,EAAgBC,uBACpB,SAACC,GAA4C,IACnCC,EAAiBD,EAAjBC,IAAKC,EAAYF,EAAZE,QACb,IACa,IAAVZ,GAAgBT,EAAYsB,KAAKF,MACvB,IAAVX,GAAgBR,EAAWqB,KAAKF,IAlBjB,IAkByBC,GAF3C,CAMA,IACIE,EADEC,EAAcf,EAAMgB,WAE1B,GAxBkB,IAwBdJ,EAA6B,CAC/B,IAAMK,EAAoC,IAAVjB,EAAcW,EAAd,UAAuBI,GAAvB,OAAqCJ,GACrEG,EAAYlB,OAAOsB,SAASD,EAAiB,QACxC,CACL,IAAMA,EAAkBF,EAAYI,MAAM,GAAI,GAC9CL,EAAgC,KAApBG,EAAyB,EAAIrB,OAAOsB,SAASD,EAAiB,IAExEH,EAAYnB,GAGhBG,EAAcgB,MAEhB,CAACnB,EAAKG,EAAeE,IAEjBoB,EAAeX,uBAAY,cAE9B,IACGY,GAAgBrB,EAAQ,KAAKsB,eAAe,QAAS,CACzDvB,MAAO,WACPwB,SAAU,QAGZ,OACE,2BACE7B,UAAWA,EACX8B,UAAU,UACVC,SAAUL,EACVM,UAAWlB,EACXT,MAAOA,EACPC,MAAOqB,KCxBEM,EApCC,WAAO,IAAD,EACMC,mBAAS,GADf,mBACb5B,EADa,KACN6B,EADM,KAEdC,EAAoBrB,uBAAY,SAAAsB,GAEpCC,QAAQC,IAAIF,GACZF,EAASE,KACR,IAEH,OACE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKwC,IAAKC,IAAMzC,UAAU,WAAW0C,IAAI,SACzC,sCAEE,6CAFF,2BAKA,uBACE1C,UAAU,WACV2C,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAAC,EAAD,CACE5C,IAAK,IACLG,cAAegC,EACf/B,MAAO,CAAEyC,UAAW,SACpBxC,MAAOA,OCrBGyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d605ec70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { CSSProperties, FC, KeyboardEvent, useCallback } from 'react';\n\ninterface Props {\n  className?: string;\n  max?: number;\n  onValueChange: (value: number) => void;\n  style?: CSSProperties;\n  value: number;\n}\n\nconst VALID_FIRST = /^[1-9]{1}$/;\nconst VALID_NEXT = /^[0-9]{1}$/;\nconst DELETE_KEY_CODE = 8;\n\nconst CurrencyInput: FC<Props> = ({\n  className = '',\n  max = Number.MAX_SAFE_INTEGER,\n  onValueChange,\n  style = {},\n  value,\n}) => {\n  const valueAbsTrunc = Math.trunc(Math.abs(value));\n  if (value !== valueAbsTrunc || !Number.isFinite(value) || Number.isNaN(value)) {\n    throw new Error(`invalid value property`);\n  }\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLDivElement>): void => {\n      const { key, keyCode } = e;\n      if (\n        (value === 0 && !VALID_FIRST.test(key)) ||\n        (value !== 0 && !VALID_NEXT.test(key) && keyCode !== DELETE_KEY_CODE)\n      ) {\n        return;\n      }\n      const valueString = value.toString();\n      let nextValue: number;\n      if (keyCode !== DELETE_KEY_CODE) {\n        const nextValueString: string = value === 0 ? key : `${valueString}${key}`;\n        nextValue = Number.parseInt(nextValueString, 10);\n      } else {\n        const nextValueString = valueString.slice(0, -1);\n        nextValue = nextValueString === '' ? 0 : Number.parseInt(nextValueString, 10);\n      }\n      if (nextValue > max) {\n        return;\n      }\n      onValueChange(nextValue);\n    },\n    [max, onValueChange, value]\n  );\n  const handleChange = useCallback(() => {\n    // DUMMY TO AVOID REACT WARNING\n  }, []);\n  const valueDisplay = (value / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n\n  return (\n    <input\n      className={className}\n      inputMode=\"numeric\"\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      style={style}\n      value={valueDisplay}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","import React, { FC, useCallback, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CurrencyInput from './components/CurrencyInput';\n\nconst App: FC = () => {\n  const [value, setValue] = useState(0);\n  const handleValueChange = useCallback(val => {\n    // eslint-disable-next-line\n    console.log(val);\n    setValue(val);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit&nbsp;\n          <code>src/App.tsx</code>\n          &nbsp;and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <CurrencyInput\n          max={100000000}\n          onValueChange={handleValueChange}\n          style={{ textAlign: 'right' }}\n          value={value}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}